{"version":3,"file":"questionedit.min.js","sources":["../src/questionedit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Backward compatibility file for the old popover.js\n *\n * @module     qtype_multianswerrgx/feedback\n * @copyright  2023 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* The data is stored in a hidden field */\ndefine(['jquery'], function($) {\n  return {\n    init: function() {\n      /* eslint-disable no-console */\n      // Init the css for the error divs.\n      let indexes = [5, 9];\n      for (let i = 0; i < indexes.length; i++) {\n        $('#id_error_button_group_add_gaps_' + indexes[i]).css({\n          display: 'inline',\n          color: 'red',\n        });\n      }\n      // Find out which text editor is in use.\n      const attoIsLive = $('.editor_atto').length > 0;\n      const tinymceIsLive = !attoIsLive;\n\n      // Check the state of the Checkbox to enable skipping capitalised words or not.\n      var skipcapswordscheck = $('#id_button_group_skip_caps_words');\n\n      /* A click on the Add gaps 1/5 button. */\n      $('#id_button_group_add_gaps_5').on('click', function() {\n        createGaps(5);\n      });\n\n      /* A click on the Add gaps 1/9 button. */\n      $('#id_button_group_add_gaps_9').on('click', function() {\n        createGaps(9);\n      });\n\n      /* A click on the Remove gaps button. */\n      $('#id_button_group_remove_gaps_button').on('click', function() {\n        if (tinymceIsLive) {\n          var iframe = $('#id_questiontext_ifr');\n          var iframeBody = iframe.contents().find('body');\n          var textContent = iframeBody.text();\n          var paragraphs = iframeBody.find('p').filter(function() {\n            // Exclude paragraphs that contain <img>, <audio>, or <video> tags\n            return $(this).find('img, audio, video').length === 0;\n          });\n        } else {\n          //const divHTML = document.getElementById(\"id_questiontexteditable\").innerHTML;\n        }\n        // Regular expression to detect the presence of sub-questions in question text.\n        var regex = /\\{[^}]*[^}]*\\}/g;\n        var containsGaps = regex.test(textContent);\n        let paraText;\n        if (containsGaps) {\n          for (let i = 0; i < paragraphs.length; i++) {\n            paraText = $(paragraphs[i]).text();\n            const cleanedText = paraText.replace(/\\{[^:]+:[^:]+:=(\\w+).*?\\}/g, '$1');\n            $(paragraphs[i]).text(cleanedText);\n          }\n        }\n        $('#id_button_group_remove_gaps_button').prop('disabled', true);\n        $('#id_error_button_group_add_gaps_5').html('');\n        $('#id_error_button_group_add_gaps_9').html('');\n        return;\n      });\n\n      /**\n       * Encloses every nth word in square brackets, keeping punctuation outside the brackets.\n       * @param {number} interval - The interval at which to enclose words in brackets.\n       * @returns {string} The modified text with every nth word enclosed in brackets.       *\n       */\n      function createGaps(interval) {\n        // Init error divs.\n        $('#id_error_button_group_add_gaps_5').html('');\n        $('#id_error_button_group_add_gaps_9').html('');\n        var skipcapswords = skipcapswordscheck.prop('checked');\n        const capsWords = new Array();\n        var textContent;\n        let enoughWords;\n        if (tinymceIsLive) {\n          var iframe = $('#id_questiontext_ifr');\n          var iframeBody = iframe.contents().find('body');\n          textContent = iframeBody.text();\n          var paragraphs = iframeBody.find('p').filter(function() {\n            // Exclude paragraphs that contain <img>, <audio>, or <video> tags\n            return $(this).find('img, audio, video').length === 0;\n          });\n        } else if (attoIsLive) {\n          // Get the div element by ID\n          var editorContent = $('#id_questiontexteditable');\n          var $divContent = $('<div>').html(editorContent.html());\n          textContent = $divContent.text();\n          // Find paragraphs that don't contain img, audio, or video tags\n          var paragraphs = $divContent.find('p').filter(function() {\n              // Exclude paragraphs that contain <img>, <audio>, or <video> tags\n              return $(this).find('img, audio, video').length === 0;\n          });\n        }\n        // Regular expression to detect the presence of sub-questions in question text.\n        console.log('textContent = ' + textContent);\n        var pattern = /\\{[^}]*[^}]*\\}/g;\n        // Check if the pattern matches the string\n        if (pattern.test(textContent)) {\n          $('#id_error_button_group_add_gaps_' + interval).html(M.util.get_string(\n            'addgapserror',\n            'qtype_multianswerrgx'\n          ));\n          return;\n        }\n        // Check if there are enough words at least in one \"gappable\" paragraph.\n        let totalWords = 0;\n        let paratext;\n        for (let i = 0; i < paragraphs.length; i++) {\n          paratext = $(paragraphs[i]).text();\n          totalWords = paratext.split(' ');\n          enoughWords = false;\n          if (totalWords.length > interval) {\n            enoughWords = true;\n            continue;\n          }\n        }\n        if (!enoughWords) {\n          $('#id_error_button_group_add_gaps_' + interval).html(M.util.get_string(\n            'tooshortforgapserror',\n            'qtype_multianswerrgx'\n          ));\n          return;\n        }\n        for (let i = 0; i < paragraphs.length; i++) {\n          let paraText = $(paragraphs[i]).text();\n          paraText = paraText.replace(/\\s+/g, ' ').trim();\n          let words = paraText.split(' ');\n          // With many thanks to Mark Johnson for this script.\n          // Loop through the words and enclose every 5th or 9th word in SHORTANSWER marker.\n           let offset = 1;\n           for (let index = 0; index < words.length; index++) {\n             if ((index + offset) % interval === 0) {\n               // Separate the word from any trailing punctuation\n               let word = words[index];\n               let punctuation = '';\n              if (/[.,!?;:]+$/.test(word)) {\n                  punctuation = word.slice(-1); // Get the punctuation mark\n                  word = word.slice(0, -1); // Remove the punctuation from the word\n              }\n              // Check if the word starts with a capital letter\n              if (skipcapswords && word && word[0] === word[0].toUpperCase() && /[A-Za-z]/.test(word[0])) {\n                // If the word starts with a capital letter, skip the gapping transformation\n                // Do not skip the gapping transformation if capitalised word has already been gapped.\n                if (!capsWords.includes(word)) {\n                offset -= 1;\n                // Add new capitalised word to the capsWords list.\n                capsWords.push(word);\n                continue;\n                }\n              }\n              // Enclose the word in SHORTANSWER (SA) brackets, then add back the punctuation\n              words[index] = `{1:SA:=${word}}${punctuation}`;\n            }\n          }\n          // Join the words back into a single string\n          let gappedText = words.join(' ');\n          console.log('gappedText = ' + gappedText);\n          if (gappedText !== '') {\n            $(paragraphs[i]).text(gappedText);\n          }\n          $('#id_button_group_remove_gaps_button').prop('disabled', false);\n        }\n        /*\n        // Apply text manipulation to the paragraphs\n        paragraphs.each(function() {\n            $(this).text('gappedText');  // 'gappedText' should be the modified content you want to insert\n        });\n*/\n        // Set the modified content back to the ATTO editor\n        //editorContent.html($divContent.html());\n      }\n    }\n  };\n});\n"],"names":["define","$","init","indexes","i","length","css","display","color","attoIsLive","tinymceIsLive","skipcapswordscheck","createGaps","interval","html","skipcapswords","prop","capsWords","Array","textContent","enoughWords","iframeBody","contents","find","text","paragraphs","filter","this","editorContent","$divContent","console","log","test","M","util","get_string","paratext","totalWords","split","paraText","replace","trim","words","offset","index","word","punctuation","slice","toUpperCase","includes","push","gappedText","join","on","cleanedText"],"mappings":"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"}